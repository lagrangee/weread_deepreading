let bookName;let authorName;let AIService;async function initContentScript(){try{const pageTitle=document.title;const parts=pageTitle.split("-").map((part=>part.trim()));if(parts.length>=3){bookName=parts[0];authorName=parts.length===3?parts[1]:parts[2];console.log(`${window.CONFIG.LOG_PREFIX} 初始化成功 - 书名: ${bookName}, 作者: ${authorName}`)}else{console.warn(`${window.CONFIG.LOG_PREFIX} 无法解析页面标题: ${pageTitle}`)}if(!isInCoverPage()){FloatingMenu.create(bookName,authorName)}setupCoverPageListener();const{currentProvider:currentProvider="wenxin"}=await chrome.storage.sync.get("currentProvider");({AIService:AIService}=await import(chrome.runtime.getURL("src/ai/service.js")));window.AIService=AIService;AIService.getInstance(currentProvider);console.log(`${window.CONFIG.LOG_PREFIX} AI服务初始化成功: ${currentProvider}`);setupMessageListener()}catch(error){console.error(`${window.CONFIG.LOG_PREFIX} 初始化失败:`,error);throw new Error(`初始化失败: ${error.message}`)}}function setupMessageListener(){chrome.runtime.onMessage.addListener(((message,sender,sendResponse)=>{if(message.type==="UPDATE_SETTINGS"){console.log(`${window.CONFIG.LOG_PREFIX} 更新AI设置:`,message.settings);AIService.getInstance().updateSettings(message.settings);sendResponse({success:true})}return true}))}function isValidCopyButton(node){return node?.nodeType===Node.ELEMENT_NODE&&node.classList?.contains(window.CONFIG.COPY_BUTTON_CLASS)&&!node.hasListener}async function handleCopyClick(){try{const text=await navigator.clipboard.readText();if(!text?.trim()){console.warn(`${window.CONFIG.LOG_PREFIX} 剪贴板内容为空`);return}FloatingMenu.getInstance().show({text:text})}catch(error){console.error(`${window.CONFIG.LOG_PREFIX} 剪贴板访问错误:`,error);if(error.name==="NotAllowedError"){throw new Error("需要剪贴板访问权限，请在浏览器设置中允许访问")}throw new Error(`剪贴板访问失败: ${error.message}`)}}function setupCopyButton(button){if(!button)return;button.addEventListener("click",handleCopyClick);button.hasListener=true;console.log(`${window.CONFIG.LOG_PREFIX} 复制按钮监听已设置`)}function setupCopyButtonListener(){const observer=new MutationObserver((mutations=>{for(const mutation of mutations){if(!mutation.addedNodes.length)continue;for(const node of mutation.addedNodes){if(isValidCopyButton(node)){setupCopyButton(node);observer.disconnect();break}}}}));observer.observe(document.body,{childList:true,subtree:true})}function isInCoverPage(){const coverPage=document.querySelector(".horizontalReaderCoverPage");return coverPage&&window.getComputedStyle(coverPage).display!=="none"}function setupCoverPageListener(){const coverPage=document.querySelector(".horizontalReaderCoverPage");if(!coverPage)return;const observer=new MutationObserver((mutations=>{mutations.forEach((mutation=>{if(mutation.type==="attributes"&&mutation.attributeName==="style"){const displayValue=window.getComputedStyle(coverPage).display;const floatingMenu=FloatingMenu.getInstance();if(displayValue==="none"){if(floatingMenu){floatingMenu.setInitialPosition()}else{FloatingMenu.create(bookName,authorName)}}else{floatingMenu?.hide({needSaveSettings:false})}}}))}));observer.observe(coverPage,{attributes:true,attributeFilter:["style"]})}function initialize(){initContentScript().catch((error=>{console.error(`${window.CONFIG.LOG_PREFIX} 初始化错误:`,error)}));setupCopyButtonListener()}if(document.readyState==="loading"){document.addEventListener("DOMContentLoaded",initialize)}else{setTimeout(initialize,500)}